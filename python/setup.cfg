[flake8]
ignore =
    C812, # missing trailing comma -> too many false positives in multiline functions calls
    D100, # Missing docstring in public module -> most modules are just single classes, no need for a docstring
    D107, # Missing docstring in __init__ -> __init__ is documented in class docstring
    D200, # One-line docstring should fit on one line with quotes -> We do not do that.
    D205, # 1 blank line required between summary line and description -> We do not do that.
    DAR, # flake8-docstrings is used instead, darglint has to many false positives
    F821, # Undefined name -> too many false positive due to future imports
    PLC0114, # Missing module docstring (missing-module-docstring) -> most modules are just single classes, no need for a docstring
    PLC0116, # Missing function or method docstring (missing-function-docstring) -> checked by other linters
    PLC0199, # First line empty in module docstring (docstring-first-line-empty) -> do not care
    PLC0301, # Line too long -> check by other linters
    PLC2001, # Avoid comparisons to zero (compare-to-zero) -> Explicit is better than implicit
    PLE0611, # No name '??' in module '??' -> too many false positive with PySide6
    PLE1101, # Module '??' has no '??' member (no-member) -> too many false positive with PySide6
    PLI1101, # Module '??' has no '??' member, but source is unavailable. -> too many false positive with PySide6
    PLR0902, # Too many instance attributes (?/7) (too-many-instance-attributes) -> do not care
    PLR0903, # Too few public methods (?/2) (too-few-public-methods) -> do not care
    PLR0911, # Too many return statements (?/6) (too-many-return-statements) -> do not care
    PLR1702, # Too many nested blocks (?/5) (too-many-nested-blocks) -> unrealistic limit
    PLR6003, # Consider using alternative Union syntax instead of 'Optional' (consider-alternative-union-syntax) ->
             # Optional is used for optional parameters, Union would indicate 'None' as a meaningful input
    PLR6103, # consider-using-assignment-expr -> Makes code not really more readable
    PLW0149, # Used `while` loop (while-used) -> while loops are allowed
    PLW0160, # Consider rewriting as a ternary expression (consider-ternary-expression) -> do not care
    PLW0717, # try clause contains 2 statements, expected at most 1 (too-many-try-statements) -> we use bigger try bodies, makes no sense to put 5 tries behind each other
    Q000, # Double quotes found but single quotes preferred -> We use both
    RST304, # Unknown interpreted text role ?? -> too many false positive
    W503, # line break before binary operator  -> outdated by April 16th, 2016 and replaced by W504
    WPS110, # Found wrong variable name: ?? -> too many false positive
    WPS115, # Found upper-case constant in a class -> constants are uppercase
    WPS201, # Found module with too many imports: ?? > 12 -> imports are not limited
    WPS214, # Found too many methods -> Do not care
    WPS220, # Found too deep nesting: ?? > 20 -> not configurable, 20 is to few
    WPS226, # Found string literal over-use -> too many false positive, it is used to often in Connector
    WPS229, # Found too long ``try`` body length: ?? > 1 -> we use bigger try bodies, makes no sense to put 5 tries behind each other
    WPS231, # Found function with too much cognitive complexity: ?? > 16 -> calculation makes no sense
    WPS232, # Found `percent` string formatting -> too many false positive
    WPS235, # Found too many imported names from a module: ?? > 8 -> imports are not limited
    WPS237, # Found a too complex `f` string -> reports too simple cases
    WPS305, # Found `f` string -> 'f' strings are simple to use, probably avoid for logging but else
    WPS306, # Found class without a base class -> Do not care, we do not inherit explicit from object
    WPS318, # Found extra indentation -> Too many false positive not worth to enable for the few correct ones
    WPS323, # Found `\percentage\` string formatting -> \percentage\ is never used and too many false positive in logging functions
    WPS337, # Found multiline conditions -> Do not care
    WPS430, # Found nested function -> allowed
    WPS602, # Found using `@staticmethod` -> More clean than a module function sometimes
    # additional project based disables
    WPS402, # Found `noqa` comments overuse: ?? -> may work for simple projects
    WPS412,
    WPS421 # Found wrong function call: ??
max-annotation-complexity = 4
max-access-level = 5
max-cognitive-score = 16
max-expressions = 20
max-jones-score = 18
max-line-complexity = 24
max-local-variables = 10
max-module-members = 10
max-raises = 6
max-returns = 10
statistics = True
max_line_length = 160
exclude =
    .git/,
    __pycache__,
    tools/

[isort]
line_length = 160
case_sensitive = True

[mypy]
no_implicit_optional = True
scripts_are_modules = True
warn_unused_ignores = True
show_error_codes = True

[mypy-git.*]
ignore_missing_imports = True
